/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import Model.Mailbox;
import javax.swing.JOptionPane;
import Model.Message;
import Model.MessageType;
import Model.Producer;
import Model.QueueType;
import Model.Receiver;
import Model.SynchronizationType;
import Model.Process;
import static java.lang.Thread.sleep;
import javax.swing.JFileChooser;
import java.util.*; 
import Model.Command.*;
import java.awt.event.KeyEvent;
import Controller.FunctionManager;
import java.io.File;
import Controller.BashFile;
import Model.Log;
import Model.LogMessage;
import java.io.FileNotFoundException;
import java.util.logging.Level;
import java.util.logging.Logger;


/**
 *
 * @author Joseph Salas
 */
public class MainPage extends javax.swing.JFrame {

    
    private String sync_ReceiveType;
    private String sync_SendType;
    private boolean direccionamientoDirecto;
    private boolean direccionamientoIndirecto;
    private String direc_receiveType;
    private String direc_indirecType;
    private String formatType;
    private String formatSize;
    private String queueHandle;
    private int numProcess;
    private int queueSizeType;
    private int processCounter = 1;
    private SynchronizationType synchronizationTypeProducer; 
    private SynchronizationType synchronizationTypeReceiver;
    private QueueType queueType;
    private int createdProcess = 0; 
    private CommandTokenizer commandTokenizer = CommandTokenizer.getInstance();
    private ICommand currentCommand ;
    private FunctionManager functionManager = new FunctionManager();
    private int mailboxCounter = 1;
    private File file;
    private ArrayList<String> commands;
    
    
    /**
     * Creates new form MainPage
     */
    public MainPage() {
        initComponents();
        eventLogArea.setEditable(false);
        

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        panelOpciones = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        direc_direcRadio = new javax.swing.JRadioButton();
        jLabel9 = new javax.swing.JLabel();
        direc_indirectRadio = new javax.swing.JRadioButton();
        jLabel10 = new javax.swing.JLabel();
        formatCombo = new javax.swing.JComboBox<>();
        formatField = new javax.swing.JTextField();
        direc_receiveCombo = new javax.swing.JComboBox<>();
        direc_indirecCombo = new javax.swing.JComboBox<>();
        sync_SendCombo = new javax.swing.JComboBox<>();
        sync_ReceiveCombo = new javax.swing.JComboBox<>();
        queueCombo = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        processSlider = new javax.swing.JSlider();
        queueSize = new javax.swing.JTextField();
        startButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        eventLogArea = new javax.swing.JTextArea();
        jLabel12 = new javax.swing.JLabel();
        commandFileBtn = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        consoleArea = new javax.swing.JTextArea();
        jLabel15 = new javax.swing.JLabel();
        syn_Info = new javax.swing.JLabel();
        direccionamiento_Info = new javax.swing.JLabel();
        formatoMsj_Info = new javax.swing.JLabel();
        colas_Info = new javax.swing.JLabel();
        cant_ProcesosInfo = new javax.swing.JLabel();
        size_ColaInfo = new javax.swing.JLabel();
        log_Help = new javax.swing.JLabel();
        consola_Info = new javax.swing.JLabel();
        buttons_Info = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Message Passing");
        setName("mainPage"); // NOI18N

        jLabel1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel1.setText("Conguración para Message Passing");

        jLabel2.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel2.setText("Sincronización");

        jLabel3.setText("Direccionamiento");

        jLabel4.setText("Formato");

        jLabel5.setText("Manejo de Colas");

        jLabel6.setText("Send");

        jLabel7.setText("Receive");

        buttonGroup1.add(direc_direcRadio);
        direc_direcRadio.setText("Directo");
        direc_direcRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                direc_direcRadioActionPerformed(evt);
            }
        });

        jLabel9.setText("Receive");

        buttonGroup1.add(direc_indirectRadio);
        direc_indirectRadio.setText("Indirecto");
        direc_indirectRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                direc_indirectRadioActionPerformed(evt);
            }
        });

        jLabel10.setText("Largo");

        formatCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Fijo", "Variable" }));

        formatField.setText("20");
        formatField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                formatFieldActionPerformed(evt);
            }
        });

        direc_receiveCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Explícito", "Implícito" }));
        direc_receiveCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                direc_receiveComboActionPerformed(evt);
            }
        });

        direc_indirecCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Estático", "Dinámico" }));
        direc_indirecCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                direc_indirecComboActionPerformed(evt);
            }
        });

        sync_SendCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "BLOCKING", "NONBLOCKING" }));
        sync_SendCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sync_SendComboActionPerformed(evt);
            }
        });

        sync_ReceiveCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "BLOCKING", "NONBLOCKING", "Prueba de llegada" }));

        queueCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "FIFO", "PRIORITY" }));

        jLabel8.setText("Cantidad de procesos");

        jLabel11.setText("Tamaño de la cola");

        processSlider.setMajorTickSpacing(15);
        processSlider.setMaximum(15);
        processSlider.setMinorTickSpacing(1);
        processSlider.setPaintTicks(true);
        processSlider.setValue(0);

        startButton.setText("Start Simulation");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        eventLogArea.setColumns(20);
        eventLogArea.setRows(5);
        jScrollPane2.setViewportView(eventLogArea);

        jLabel12.setText("Log de eventos");

        commandFileBtn.setText("Cargar Comandos");
        commandFileBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                commandFileBtnActionPerformed(evt);
            }
        });

        consoleArea.setColumns(20);
        consoleArea.setRows(5);
        consoleArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                consoleAreaKeyPressed(evt);
            }
        });
        jScrollPane3.setViewportView(consoleArea);

        jLabel15.setText("Consola");

        syn_Info.setFont(new java.awt.Font("Arial", 3, 24)); // NOI18N
        syn_Info.setForeground(new java.awt.Color(204, 0, 0));
        syn_Info.setText("?");
        syn_Info.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                syn_InfoMouseClicked(evt);
            }
        });

        direccionamiento_Info.setFont(new java.awt.Font("Arial", 3, 24)); // NOI18N
        direccionamiento_Info.setForeground(new java.awt.Color(204, 0, 0));
        direccionamiento_Info.setText("?");
        direccionamiento_Info.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                direccionamiento_InfoMouseClicked(evt);
            }
        });

        formatoMsj_Info.setFont(new java.awt.Font("Arial", 3, 24)); // NOI18N
        formatoMsj_Info.setForeground(new java.awt.Color(204, 0, 0));
        formatoMsj_Info.setText("?");
        formatoMsj_Info.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formatoMsj_InfoMouseClicked(evt);
            }
        });

        colas_Info.setFont(new java.awt.Font("Arial", 3, 24)); // NOI18N
        colas_Info.setForeground(new java.awt.Color(204, 0, 0));
        colas_Info.setText("?");
        colas_Info.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                colas_InfoMouseClicked(evt);
            }
        });

        cant_ProcesosInfo.setFont(new java.awt.Font("Arial", 3, 24)); // NOI18N
        cant_ProcesosInfo.setForeground(new java.awt.Color(204, 0, 0));
        cant_ProcesosInfo.setText("?");
        cant_ProcesosInfo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cant_ProcesosInfoMouseClicked(evt);
            }
        });

        size_ColaInfo.setFont(new java.awt.Font("Arial", 3, 24)); // NOI18N
        size_ColaInfo.setForeground(new java.awt.Color(204, 0, 0));
        size_ColaInfo.setText("?");
        size_ColaInfo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                size_ColaInfoMouseClicked(evt);
            }
        });

        log_Help.setFont(new java.awt.Font("Arial", 3, 24)); // NOI18N
        log_Help.setForeground(new java.awt.Color(204, 0, 0));
        log_Help.setText("?");
        log_Help.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                log_HelpMouseClicked(evt);
            }
        });

        consola_Info.setFont(new java.awt.Font("Arial", 3, 24)); // NOI18N
        consola_Info.setForeground(new java.awt.Color(204, 0, 0));
        consola_Info.setText("?");
        consola_Info.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                consola_InfoMouseClicked(evt);
            }
        });

        buttons_Info.setFont(new java.awt.Font("Arial", 3, 24)); // NOI18N
        buttons_Info.setForeground(new java.awt.Color(204, 0, 0));
        buttons_Info.setText("?");
        buttons_Info.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                buttons_InfoMouseClicked(evt);
            }
        });

        jButton1.setText("Reset");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelOpcionesLayout = new javax.swing.GroupLayout(panelOpciones);
        panelOpciones.setLayout(panelOpcionesLayout);
        panelOpcionesLayout.setHorizontalGroup(
            panelOpcionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelOpcionesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelOpcionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelOpcionesLayout.createSequentialGroup()
                        .addGroup(panelOpcionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelOpcionesLayout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(direccionamiento_Info))
                            .addComponent(sync_ReceiveCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(panelOpcionesLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(queueCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(direc_direcRadio)
                            .addGroup(panelOpcionesLayout.createSequentialGroup()
                                .addGap(126, 126, 126)
                                .addGroup(panelOpcionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(direc_indirecCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(direc_indirectRadio)))
                            .addGroup(panelOpcionesLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(formatCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(formatField, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(panelOpcionesLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jLabel10))
                            .addGroup(panelOpcionesLayout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(colas_Info))
                            .addGroup(panelOpcionesLayout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(size_ColaInfo))
                            .addGroup(panelOpcionesLayout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cant_ProcesosInfo))
                            .addComponent(processSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(queueSize, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(panelOpcionesLayout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(syn_Info))
                            .addComponent(jLabel7)
                            .addComponent(sync_SendCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)
                            .addGroup(panelOpcionesLayout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addComponent(formatoMsj_Info))
                            .addGroup(panelOpcionesLayout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addGroup(panelOpcionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(direc_receiveCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel9))))
                        .addGap(39, 39, 39)
                        .addGroup(panelOpcionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3)
                            .addGroup(panelOpcionesLayout.createSequentialGroup()
                                .addGroup(panelOpcionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(panelOpcionesLayout.createSequentialGroup()
                                        .addComponent(jLabel12)
                                        .addGap(18, 18, 18)
                                        .addComponent(log_Help))
                                    .addGroup(panelOpcionesLayout.createSequentialGroup()
                                        .addComponent(jLabel15)
                                        .addGap(18, 18, 18)
                                        .addComponent(consola_Info)))
                                .addGap(0, 357, Short.MAX_VALUE))
                            .addComponent(jScrollPane2))
                        .addGap(29, 29, 29))
                    .addGroup(panelOpcionesLayout.createSequentialGroup()
                        .addComponent(startButton)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1)
                        .addGap(21, 21, 21)
                        .addComponent(commandFileBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(buttons_Info)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        panelOpcionesLayout.setVerticalGroup(
            panelOpcionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelOpcionesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelOpcionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelOpcionesLayout.createSequentialGroup()
                        .addGroup(panelOpcionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel12)
                            .addComponent(log_Help, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(14, 14, 14)
                        .addComponent(jScrollPane2))
                    .addGroup(panelOpcionesLayout.createSequentialGroup()
                        .addComponent(syn_Info, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(13, 13, 13)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sync_SendCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(23, 23, 23)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(sync_ReceiveCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                        .addGroup(panelOpcionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(direccionamiento_Info))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelOpcionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(direc_direcRadio)
                            .addComponent(direc_indirectRadio))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelOpcionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(direc_receiveCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(direc_indirecCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(panelOpcionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(formatoMsj_Info, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))))
                .addGap(18, 18, 18)
                .addGroup(panelOpcionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelOpcionesLayout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelOpcionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(formatCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(formatField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(31, 31, 31))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelOpcionesLayout.createSequentialGroup()
                        .addGroup(panelOpcionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel15)
                            .addComponent(consola_Info, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(panelOpcionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelOpcionesLayout.createSequentialGroup()
                        .addGroup(panelOpcionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(colas_Info, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(queueCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelOpcionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(cant_ProcesosInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(3, 3, 3)
                        .addComponent(processSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(panelOpcionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(size_ColaInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(panelOpcionesLayout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                        .addGap(60, 60, 60)))
                .addComponent(queueSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(panelOpcionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelOpcionesLayout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addGroup(panelOpcionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(startButton)
                            .addComponent(commandFileBtn)
                            .addComponent(jButton1)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelOpcionesLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttons_Info, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(panelOpciones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelOpciones, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formatFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_formatFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_formatFieldActionPerformed

    private void direc_receiveComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_direc_receiveComboActionPerformed
   
    }//GEN-LAST:event_direc_receiveComboActionPerformed

    private void direc_indirecComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_direc_indirecComboActionPerformed
        
    }//GEN-LAST:event_direc_indirecComboActionPerformed

    private void direc_direcRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_direc_direcRadioActionPerformed
 
       if (direc_direcRadio.isSelected())
       {
           direc_indirecCombo.disable();
           direc_receiveCombo.enable();
       }
       
    }//GEN-LAST:event_direc_direcRadioActionPerformed

    private void direc_indirectRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_direc_indirectRadioActionPerformed
        if (direc_indirectRadio.isSelected())
        {
            direc_receiveCombo.disable();
            direc_indirecCombo.enable();
            
        }
       
    }//GEN-LAST:event_direc_indirectRadioActionPerformed

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed

       
        if(sync_SendCombo.getSelectedItem().toString() == "BLOCKING" 
                & sync_ReceiveCombo.getSelectedItem().toString() == "NONBLOCKING")
        {
            JOptionPane.showMessageDialog(null, "La sincronización no puede recibir los parámetros indicados"
                    , "Error", JOptionPane.ERROR_MESSAGE);
        }
        else
        {
            direc_receiveCombo.disable();
            direc_indirecCombo.disable();
            direc_indirectRadio.disable();
            direc_direcRadio.disable();
            sync_SendCombo.disable();
            sync_ReceiveCombo.disable();
            formatCombo.disable();
            formatField.disable();
            queueCombo.disable();
            processSlider.disable();
            queueSize.disable();
             
            sync_ReceiveType = sync_ReceiveCombo.getSelectedItem().toString();
            sync_SendType = sync_SendCombo.getSelectedItem().toString();
            if(direc_direcRadio.isSelected())
            {
                direccionamientoDirecto = true;
                direccionamientoIndirecto = false;
            }
            else if(direc_indirectRadio.isSelected())
            {
                direccionamientoIndirecto = true;
                direccionamientoDirecto = false;
            }
            direc_receiveType = direc_receiveCombo.getSelectedItem().toString();
            direc_indirecType = direc_indirecCombo.getSelectedItem().toString();
            formatType = formatCombo.getSelectedItem().toString();
            formatSize = formatField.getText();
            queueHandle  = queueCombo.getSelectedItem().toString();
            numProcess = processSlider.getValue();
            queueSizeType = Integer.parseInt(queueSize.getText());
        }
        if(sync_ReceiveCombo.getSelectedItem().toString() ==  "BLOCKING")
        {
            synchronizationTypeProducer = SynchronizationType.BLOCKING;
        }else
        {
            synchronizationTypeProducer = SynchronizationType.NONBLOCKING;
        }
        
        if(sync_SendCombo.getSelectedItem().toString() ==  "BLOCKING")
        {
            synchronizationTypeReceiver = SynchronizationType.BLOCKING;
        }else
        {
            synchronizationTypeReceiver = SynchronizationType.NONBLOCKING;
        }
        
        if(queueCombo.getSelectedItem().toString() ==  "FIFO")
        {
            queueType = QueueType.FIFO;
        }else
        {
            queueType = QueueType.PRIORITY;
        }
       
        functionManager.createImplicitProcess(processCounter, synchronizationTypeProducer, queueType, queueSizeType, synchronizationTypeProducer);
        //Se incrementa el contador de procesos
        processCounter++;
        
  
  
    }//GEN-LAST:event_startButtonActionPerformed

    private void sync_SendComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sync_SendComboActionPerformed
      
    }//GEN-LAST:event_sync_SendComboActionPerformed

    private void commandFileBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_commandFileBtnActionPerformed
        BashFile bashFile = new BashFile();
        JFileChooser openFile = new JFileChooser();
        openFile.showOpenDialog(null);
        openFile.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES); 
        file = openFile.getSelectedFile();
        try {
            commands = bashFile.getCommands(file);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainPage.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        executeBash(commands);
        
        
    }//GEN-LAST:event_commandFileBtnActionPerformed

    private void consoleAreaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_consoleAreaKeyPressed
        
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
            currentCommand = commandTokenizer.analyzeCommand(consoleArea.getText());
            ArrayList<Object> params = new ArrayList<>();
            params.add(this);
            currentCommand.execute(params);
            
            System.out.println(consoleArea.getText());
            consoleArea.setText("");
            String logs = "";
            for (int i = 0; i < Log.getInstance().getLogs().size(); i++) 
            {
                LogMessage lm;
                logs += Log.getInstance().getLogs().get(i).getMessage() + "\n";
                
            }
            eventLogArea.setText(logs);
        }
        
    }//GEN-LAST:event_consoleAreaKeyPressed

    private void syn_InfoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_syn_InfoMouseClicked
               JOptionPane.showMessageDialog(null, "Se puede escoger la sincronización del message passing. \n En la opcion send"
               + "se puede escoger si el envío del proceso es Blocking o Nonblocking. El reciever se puede configurar para"
               + "que sea Blocking, Nonblocking o prueba de llegada."
                    , "Informacion de sincronización", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_syn_InfoMouseClicked

    private void direccionamiento_InfoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_direccionamiento_InfoMouseClicked
                JOptionPane.showMessageDialog(null, "Se puede escoger el tipo de direccionamiento del message passing."
                        + " \n Seleccione si desea que sea directo o indirecto. Si escogio direccionamiento directo, podra escoger si el proceso de recieve es implícito"
                        + "o explícito. \n"
                        + "Si escoge la opción de indirecto, podra luego seleccionar si requiere que sea estático o dinámico."
                    , "Informacion de sincronización", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_direccionamiento_InfoMouseClicked

    private void formatoMsj_InfoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formatoMsj_InfoMouseClicked
                JOptionPane.showMessageDialog(null, "Si lo desea puede modificar el formato del mensaje. \n"
                        + "Puede modificar el largo del mensaje y hacerlo variable, seleccionando esta opción y escribiendo a la par el tamaño deseado. De lo contrario, el largo se asignara por default"
                , "Informacion de sincronización", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_formatoMsj_InfoMouseClicked

    private void colas_InfoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_colas_InfoMouseClicked
        
        JOptionPane.showMessageDialog(null, "Se puede escoger el manejo de colas, el default es el manejo FIFO(First In First Out). \n"
                 + "Si lo desea, puede asignar el manejo por prioridad, y la prioridad será asignada en el mensaje"
                    , "Informacion de sincronización", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_colas_InfoMouseClicked

    private void cant_ProcesosInfoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cant_ProcesosInfoMouseClicked
        JOptionPane.showMessageDialog(null, "Se puede seleccionar la cantidad máxima de procesos a ejecutar"
                    , "Informacion de sincronización", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_cant_ProcesosInfoMouseClicked

    private void size_ColaInfoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_size_ColaInfoMouseClicked
        JOptionPane.showMessageDialog(null, "Seleccione el tamaño máximo de la cola de mensajes"
                    , "Informacion de sincronización", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_size_ColaInfoMouseClicked

    private void buttons_InfoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttons_InfoMouseClicked
        
        JOptionPane.showMessageDialog(null, "El botón de Start Simulation guarda la configuración previamente seleccionada por el usuario para crear los procesos. \n"
                + "El botón de cargar comandos, carga los comandos a la consola desde un archivo de texto"
                    , "Informacion de sincronización", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_buttons_InfoMouseClicked

    private void consola_InfoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_consola_InfoMouseClicked
        JOptionPane.showMessageDialog(null, "La consola será la encargada de ejecutar todos los comandos para realizar la simulación. \n"
                + "Este consola prermite 6 comandos base con diversos parámetros. create, send, recieve, display,create-mailbox y addRecceiverMailbox. \n"
                + "El comando create, recibe diferentes parámetros dependiendo si el direccionamiento es directo-implícito/explícito o indirecto \n"
                + "Utilizar la consola con los comandos:\n \n" +
"	create: comando para crear procesos\n" +
"	- Si es direccionamiento implícito: create\n" +
"	- Si es direccionamiento explícito: create *id_sender_process*\n" +
"	- Si es direccionamiento indirecto: create *id_mailbox* \n \n"
                + "create-mailbox: comando para crear mailboxes\n" +
"	- create-mailbox \n \n"
                + "add-receiver-mailbox: comando para agregar procesos a la lista de permitida del mailbox\n" +
"	- add-receiver-mailbox *id_mailbox* *id_proceso* \n \n"
                + "send: comando para enviar un mensaje a otro proceso\n" +
"	- Si es directo: send *id_proceso_sender* *id_proceso_receiver*\n" +
"	- Si es indirecto: send *id_proceso_sender* *id_mailbox*\n \n"
                + "receive: comando para recibir mensajes enviados\n" +
"	- receive *id_proceso_destino* *id_proceso_fuente* \n \n"+
                "display: comando para mostrar el log de un proceso\n" +
"	- display *id_proceso* \n \n"
                    , "Informacion de sincronización", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_consola_InfoMouseClicked

    private void log_HelpMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_log_HelpMouseClicked
        JOptionPane.showMessageDialog(null, "En esta pantalla se muestra el log general de los eventos. \n"
                + "Esto es infromación general de procesos y mensajes, si necesita más información detallada por proceso, diríjase al comando Display."
                    , "Informacion de sincronización", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_log_HelpMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainPage().setVisible(true);
                
            }
        });
    }
    
    //        Message message = new Message(MessageType.valueOf(queueCombo.getSelectedItem().toString()),2,1,Integer.parseInt(formatField.getText()),msgArea.getText());

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel buttons_Info;
    private javax.swing.JLabel cant_ProcesosInfo;
    private javax.swing.JLabel colas_Info;
    private javax.swing.JButton commandFileBtn;
    private javax.swing.JLabel consola_Info;
    private javax.swing.JTextArea consoleArea;
    private javax.swing.JRadioButton direc_direcRadio;
    private javax.swing.JComboBox<String> direc_indirecCombo;
    private javax.swing.JRadioButton direc_indirectRadio;
    private javax.swing.JComboBox<String> direc_receiveCombo;
    private javax.swing.JLabel direccionamiento_Info;
    private javax.swing.JTextArea eventLogArea;
    private javax.swing.JComboBox<String> formatCombo;
    private javax.swing.JTextField formatField;
    private javax.swing.JLabel formatoMsj_Info;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel log_Help;
    private javax.swing.JPanel panelOpciones;
    private javax.swing.JSlider processSlider;
    private javax.swing.JComboBox<String> queueCombo;
    private javax.swing.JTextField queueSize;
    private javax.swing.JLabel size_ColaInfo;
    private javax.swing.JButton startButton;
    private javax.swing.JLabel syn_Info;
    private javax.swing.JComboBox<String> sync_ReceiveCombo;
    private javax.swing.JComboBox<String> sync_SendCombo;
    // End of variables declaration//GEN-END:variables

    public void createProcess(int idAux){
        if(createdProcess < numProcess)
            {
                if(direc_direcRadio.isSelected())
                {
                    if(direc_receiveCombo.getSelectedItem().toString()== "Explícito")
                    {
                        functionManager.createExplicitProcess(processCounter, synchronizationTypeProducer, queueType, queueSizeType, synchronizationTypeProducer, 
                                idAux);
                    }else{
                        functionManager.createImplicitProcess(processCounter, synchronizationTypeProducer, queueType, queueSizeType, synchronizationTypeProducer);

                    }
                }
                else if(direc_indirectRadio.isSelected())
                {
                    CommandTokenizer.getInstance().indirect = true;
                    if(direc_receiveCombo.getSelectedItem().toString()== "Estático")
                    {
                        functionManager.createIndirectProcess(processCounter, synchronizationTypeProducer, queueType, queueSizeType, synchronizationTypeProducer, idAux);
                    }else
                    {
                        functionManager.createIndirectProcess(processCounter, synchronizationTypeProducer, queueType, queueSizeType, synchronizationTypeProducer, idAux);
                    }
                }
                processCounter++;
                createdProcess++; 
            }else{JOptionPane.showMessageDialog(null, "Ha llegado al límite de procesos establecidos"
                        , "Error", JOptionPane.ERROR_MESSAGE);}
    }
    
    
        public void sendMessage(int sourceID, int destinyID, String message, int priority) throws InterruptedException{

                if(direc_direcRadio.isSelected())
                {
                    if(formatCombo.getSelectedItem().toString() == "Fijo")
                    {
                        functionManager.sendDirectProcess(sourceID, destinyID, MessageType.FIXED, Integer.parseInt(formatField.getText())
                                    , message, priority);
                    }else
                    {
                        functionManager.sendDirectProcess(sourceID, destinyID, MessageType.VARIABLE, Integer.parseInt(formatField.getText())
                                , message, priority);
                    }
                }
                else if(direc_indirectRadio.isSelected())
                {
                    if(formatCombo.getSelectedItem().toString() == "Fijo")
                    {
                        functionManager.sendIndirectProcess(sourceID, destinyID, MessageType.FIXED, Integer.parseInt(formatField.getText())
                                , message, priority);
                    }else
                    {
                        functionManager.sendIndirectProcess(sourceID, destinyID, MessageType.VARIABLE, Integer.parseInt(formatField.getText())
                                , message, priority);
                    }
                }
                else{JOptionPane.showMessageDialog(null, "Ha llegado al límite de procesos establecidos"
                        , "Error", JOptionPane.ERROR_MESSAGE);}
    }
        
        
        public void receiveMessage(int destinyID,int sourceID)
        {
            functionManager.receiveMessage(sourceID,destinyID);
        }
        
        public void createMailbox()
        {
            if(direc_indirectRadio.isSelected())
            {
                functionManager.createMailbox(mailboxCounter, queueSizeType, queueType);
                mailboxCounter++;
            }
            else;   
        }
        
        public void addReceiverMailbox(int mailboxId,int receiverId)
        {
            functionManager.addReceiverMailbox(mailboxId, receiverId);
        }

        public void executeBash(ArrayList<String> commands)
        {
            for (int i = 0; i < commands.size(); i++) {
            currentCommand = commandTokenizer.analyzeCommand(commands.get(i));
            ArrayList<Object> params = new ArrayList<>();
            params.add(this);
            currentCommand.execute(params);
            String logs = "";
            for (int y = 0; y < Log.getInstance().getLogs().size(); y++) 
            {
                logs += Log.getInstance().getLogs().get(y).getMessage() + "\n";
                
            }
            eventLogArea.setText(logs);
                
            }

        }
        
        public void displayProcess(int sourceId)
        {
           ArrayList<String> logMessages = Log.getInstance().getProcessLog(sourceId) ;
           String logs = "";
            for (int y = 0; y < logMessages.size(); y++) 
            {
                logs += Log.getInstance().getLogs().get(y).getMessage() + "\n";
                
            }
            JOptionPane.showMessageDialog(null, logs
                        , "Logs del proceso " + sourceId, JOptionPane.INFORMATION_MESSAGE);
        }
}
